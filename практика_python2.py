# -*- coding: utf-8 -*-
"""Практика Python2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qD69KtOJGn7C_rJKqM-GcVAMPWzKNfqp
"""

import pandas as pd

"""N1 Загрузите в колаб файлы по оценкам (ratings) и фильмам (movies) и создайте на их основе pandas-датафреймы

Načtěte soubory s hodnocením (ratings) a filmy (movies) do Colabu a vytvořte na jejich základě pandas DataFrames.
"""

df_ratings=pd.read_csv('u.data.csv', names=['user id','item id','rating','timestamp'], sep='\t')
df_ratings.head()

df_movies = pd.read_csv('u.item.csv',names=['movie id','movie title','release date','video release date','IMDb URL','unknown','Action','Adventure','Animation',"Children's",'Comedy','Crime','Documentary','Drama','Fantasy','Film-Noir','Horror','Musical','Mystery','Romance','Sci-Fi','Thriller','War','Western'], sep='|', encoding='latin1')
df_movies.head()

df_movies['release date'] = pd.to_datetime(df_movies['release date'])
df_movies['video release date'] = df_movies['release date'].dt.year
df_movies.head()

df_movies.info()

"""N2 Средствами Pandas, используя dataframe ratings, найдите id пользователя, поставившего больше всего оценок

pomocí knihovny Pandas najděte id uživatele, který udělil nejvíce hodnocení
"""

df_ratings_id=df_ratings.groupby('user id').agg({'rating':'count'}).reset_index()
df_ratings_id.head()

df_ratings_id= df_ratings_id.sort_values(by='rating', ascending=False)
df_ratings_id.head(1)

"""N3 Оставьте в датафрейме ratings только те фильмы, который оценил данный пользователь

Zůstaňte v datovém rámci "ratings" pouze s filmy, které ohodnotil daný uživatel.
"""

df_id_405=df_ratings[df_ratings['user id']==405]
df_id_405 = df_id_405[['user id', 'item id','rating']]
df_id_405.head()

Для построения модели нам нужны признаки. В качестве таковых будем использовать:
Год выхода
Жанры
Общее количество оценок
Суммарную оценку

"""N4 Добавьте к датафрейму из задания 3 столбцы:
* По жанрам. Каждый столбец - это жанр. Единицу записываем, если
фильм принадлежит данному жанру и 0 - если нет.
*столбцы с общим количеством оценок от всех пользователей на фильм и суммарной оценкой от всех пользователей

Provést následující změny v datovém rámci ze zadání č. 3:

Přidejte sloupce pro jednotlivé žánry. Každý sloupec bude představovat jeden žánr. Pokud film patří do daného žánru, zapište 1, jinak 0.

Přidejte sloupec s celkovým počtem hodnocení od všech uživatelů pro každý film.

Přidejte sloupec se součtem hodnocení od všech uživatelů pro každý film.

"""

df_movies.columns

df_new=df_id_405.merge(df_movies, left_on='item id', right_on='movie id', how='left')
df_new=df_new[['user id','movie id','rating','release date','video release date','unknown', 'Action', 'Adventure', 'Animation',"Children's",'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir','Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War','Western']]
df_new.head()

df_ratings_for_merge=df_ratings.groupby('item id').agg({'rating':['count','sum']}).reset_index()
df_ratings_for_merge.columns = ['movie id', 'rating_count', 'rating_sum']
df_new=df_new.merge(df_ratings_for_merge, on='movie id',how='left')
df_new.head()

"""**Наша цель - научится предсказывать оценку фильма пользователем.**

**Naším cílem je naučit se předpovídat hodnocení filmu uživatelem.**

N5 Сформируйте X_train, X_test, y_train, y_test
"""

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split

df_new.columns

x,y= df_new[['movie id','video release date', 'unknown', 'Action',
       'Adventure', 'Animation', "Children's", 'Comedy', 'Crime',
       'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'Musical',
       'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western',
       'rating_count', 'rating_sum']],df_new[['rating']]

x_train, x_test, y_train, y_test=train_test_split(x,y, test_size=0.2)

"""N6 Возьмите модель линейной регрессии (или любую другую для задачи регрессии)  и обучите ее на фильмах"""

model=LinearRegression()

model.fit(x_train,y_train)

"""N7 Оцените качество модели на X_test, y_test при помощи метрик для задачи регрессии"""

from sklearn.metrics import mean_squared_error

mean_squared_error(y_train,model.predict(x_train))

mean_squared_error(y_test,model.predict(x_test))

"""**Хорошая модель**

N8 Загрузить данные в spark
"""

!apt-get update

!apt-get install openjdk-8-jdk-headless -qq > /dev/null

!wget -q https://downloads.apache.org/spark/spark-3.4.0/spark-3.4.0-bin-hadoop3.tgz

!tar -xvf spark-3.4.0-bin-hadoop3.tgz

!pip install -q findspark

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.4.0-bin-hadoop3"

import findspark
findspark.init()
from pyspark.sql import SparkSession

spark = SparkSession.builder.master("local[*]").getOrCreate()

"""N9 Средствами спарка вывести среднюю оценку для каждого фильма"""

spark_df_movies = spark.createDataFrame(df_movies)
spark_df_movies.show()

spark_df_ratings= spark.createDataFrame(df_ratings)
spark_df_ratings.show()

ratings_lim=spark_df_ratings.select('item id','rating')

ratings_group = ratings_lim.groupBy('item id')

ratings_avg=ratings_group.avg('rating')
ratings_avg=ratings_avg.withColumnRenamed('item id','movie id')
ratings_avg.show()

movies_ratings=spark_df_movies.join(ratings_avg,'movie id', how='inner')
movies_ratings.show()

movies_ratings_limit=movies_ratings.select('movie id',
 'movie title','avg(rating)',
 'unknown',
 'Action',
 'Adventure',
 'Animation',
 "Children's",
 'Comedy',
 'Crime',
 'Documentary',
 'Drama',
 'Fantasy',
 'Film-Noir',
 'Horror',
 'Musical',
 'Mystery',
 'Romance',
 'Sci-Fi',
 'Thriller',
 'War',
 'Western',
)

movies_ratings_limit.show()

genres= movies_ratings_limit.columns[3:]
genres

from pyspark.sql.functions import col, when, avg

for genre in genres:

    movies_ratings_limit = movies_ratings_limit.withColumn(genre, when(col(genre) == 1, col('avg(rating)')).otherwise(col(genre)))


movies_ratings_limit.show()

average_by_genre = movies_ratings_limit.groupBy().agg(avg('unknown'),
 avg('Action'),
 avg('Adventure'),
 avg('Animation'),
 avg("Children's"),
 avg('Comedy'),
 avg('Crime'),
 avg('Documentary'),
 avg('Drama'),
 avg('Fantasy'),
 avg('Film-Noir'),
 avg('Horror'),
 avg('Musical'),
 avg('Mystery'),
 avg('Romance'),
 avg('Sci-Fi'),
 avg('Thriller'),
 avg('War'),
 avg('Western'))
average_by_genre.show()

"""N11 В спарке получить 2 датафрейма с 5-ю самыми популярными и самыми непопулярными фильмами (по количеству оценок, либо по самой оценке - на Ваш выбор)"""

non_top_movies=movies_ratings_limit.orderBy('avg(rating)')
non_top_movies=non_top_movies.select('movie title','avg(rating)').show(5)

top_movies=movies_ratings_limit.sort('avg(rating)', ascending=False)
top_movies=top_movies.select('movie title','avg(rating)').show(5)